
// This source file was generated by hierarchy_test_util

// incudes
#include <string>
#include <iostream>
#include <cstdlib>
#include "..\sources\reflective.h"


namespace reflective
{
	namespace details
	{
		namespace test
		{
			class Class_0
			{
			};
			class Class_1
			{
			};
			class Class_2 : public Class_1
			{
				public:
				virtual ~Class_2() {}
				virtual int vfunct_Class_2() { return 42; }
				unsigned long long int** m_prop7;
				signed long long int*** m_prop8;
				char** m_prop9;
				unsigned char m_prop10;
				signed char****** m_prop11;
				float m_prop12;
				double****** m_prop13;
				long double********* m_prop14;
			};
			class Class_3 : public Class_2
			{
				public:
				virtual ~Class_3() {}
				virtual int vfunct_Class_3() { return 42; }
				signed int* m_prop15;
				unsigned long long int* m_prop16;
				unsigned long int* m_prop17;
				signed long int m_prop18;
			};
			class Class_4 : public Class_3, public Class_0
			{
			};
			class Class_5 : public Class_2
			{
			};
		};
	};
	
	void setup_type(TypeSetupContext<reflective::details::test::Class_0> & i_context)
	{
		using ThisClass = reflective::details::test::Class_0;
	};
	void setup_type(TypeSetupContext<reflective::details::test::Class_1> & i_context)
	{
		using ThisClass = reflective::details::test::Class_1;
	};
	void setup_type(TypeSetupContext<reflective::details::test::Class_2> & i_context)
	{
		using ThisClass = reflective::details::test::Class_2;
		i_context.type()->set_base_types( {
			BaseType::from_types<ThisClass, reflective::details::test::Class_1>() });
	};
	void setup_type(TypeSetupContext<reflective::details::test::Class_3> & i_context)
	{
		using ThisClass = reflective::details::test::Class_3;
		i_context.type()->set_base_types( {
			BaseType::from_types<ThisClass, reflective::details::test::Class_2>() });
	};
	void setup_type(TypeSetupContext<reflective::details::test::Class_4> & i_context)
	{
		using ThisClass = reflective::details::test::Class_4;
		i_context.type()->set_base_types( {
			BaseType::from_types<ThisClass, reflective::details::test::Class_3>(),
			BaseType::from_types<ThisClass, reflective::details::test::Class_0>() });
	};
	void setup_type(TypeSetupContext<reflective::details::test::Class_5> & i_context)
	{
		using ThisClass = reflective::details::test::Class_5;
		i_context.type()->set_base_types( {
			BaseType::from_types<ThisClass, reflective::details::test::Class_2>() });
	};
};
